Q1. What is RDBMS? Why do industries use RDBMS?
it is relational model for storing and managing data,here data is organized interms of tables(or relations),which consist of rows and column

Data Structure: RDBMS uses a structured format with tables that contain rows and columns. 
This structured approach is well-suited for organizing and storing structured data.
Data Integrity: RDBMS enforces data integrity through the use of constraints, primary keys, and foreign keys.
This ensures that data is accurate and consistent.
Querying: RDBMS provides a powerful and standardized query language, such as SQL (Structured Query Language), which makes it easy to retrieve, manipulate, and analyze data.

Q2. Explain the relationship data model in depth.
entity relationship modelis a popular data modelling approach focuses on  represnting entities and relationships between them.

entities:are the main data objects such as the customers,products or employees.
attributes:are tthe properties of entities
relationships:describe how entiies are connected or related to each other

Q3. What is the importance of Relationships in a Database management system? Explain the types
of relationships.
they define how data entities are related to each other. 

Data Organization: Relationships allow data to be organized logically, making it easier to understand and manage. Data is structured in a way that reflects real-world associations and dependencies.
Efficient Data Retrieval: Relationships enable efficient data retrieval by providing a structured way to access related information. Queries can navigate the relationships to retrieve data from multiple tables.
Complex Queries: Relationships enable complex queries that involve data from multiple tables. This is particularly useful for analytical and reporting purposes.

(1:1) Relationship:
In a one-to-one relationship, one record in one table is related to one record in another table.
This is a relatively rare type of relationship and is used when data is closely associated but does not need to be repeated in both tables.
For example, a person may have one passport, and a passport is linked to one person.
One-to-Many (1:N) Relationship:
In a one-to-many relationship, one record in one table is related to multiple records in another table.
This is a common relationship type and is used to model situations where one entity can have multiple related entities.
For example, one customer can place multiple orders.
Many-to-One (N:1) Relationship:
A many-to-one relationship is the inverse of a one-to-many relationship. It means that multiple records in one table are related to one record in another table.
This often occurs when multiple records reference a single entity.
For example, multiple students may belong to one school.
Many-to-Many (N:N) Relationship:
In a many-to-many relationship, multiple records in one table are related to multiple records in another table.
This relationship is often implemented using a junction table, which facilitates the association between entities.
For example, multiple students can enroll in multiple courses, and each course can have multiple students

Q4. Explain the different types of Keys in RDBMS considering a real-life scenario.

Primary Key:
Definition: A primary key is a unique identifier for each record in a table.
Real-life Scenario: In the "Students" table, you can use the "StudentID" as the primary key. Each student is assigned a unique StudentID, ensuring that no two students have the same ID. For example, StudentID 101 is assigned to John, and StudentID 102 is assigned to Mary.

Foreign Key:
Definition: A foreign key is a column in one table that references the primary key of another table, creating a link between the two tables.
Real-life Scenario: In the "Enrollments" table, you can have a foreign key "StudentID" that references the "StudentID" in the "Students" table. This establishes a relationship between the "Enrollments" and "Students" tables. For example, when John enrolls in a course, a record is created in the "Enrollments" table, and the "StudentID" field in that record references John's unique "StudentID."

Unique Key:
Definition: A unique key is similar to a primary key but allows null values. It enforces uniqueness within a column, but you can have multiple unique keys in a table.
Real-life Scenario: In the "Teachers" table, you might have a "TeacherID" column as a unique key. This ensures that no two teachers have the same TeacherID, but it allows for teachers who haven't been assigned an ID yet.

Composite Key:
Definition: A composite key is a key that consists of two or more columns used together to uniquely identify records.
Real-life Scenario: In the "Enrollments" table, you might use a composite key consisting of "StudentID" and "CourseID" to uniquely identify enrollments. This means that a student can enroll in the same course multiple times, but the combination of "StudentID" and "CourseID" must be unique.

Alternate Key:
Definition: An alternate key is a candidate key (a key that could be a primary key) that is not selected as the primary key.
Real-life Scenario: In the "Courses" table, you might have "CourseCode" as an alternate key. While the primary key could be the "CourseID," "CourseCode" is an alternate key that could also be used to uniquely identify courses.

Super Key:
Definition: A super key is a set of one or more columns that can be used to uniquely identify records.
Real-life Scenario: In the "Teachers" table, a super key could be a combination of "TeacherID," "FirstName," and "LastName." This combination is unique and can be used to identify teachers.

Candidate Key:
Definition: A candidate key is a minimal super key, which means it is the smallest set of columns that can uniquely identify records.
Real-life Scenario: In the "Students" table, the "Email" could be a candidate key because it is unique and minimal, meaning no other subset of columns is needed to uniquely identify students

Q5. Write a short note on Single Responsibility Principle.
 meaning that it should have a single, well-defined responsibility or job within a software system.
High Cohesion: Following SRP leads to high cohesion, which means that all the methods and attributes within a class should be closely related to its single responsibility.
This makes the class more understandable and maintainable.
example:
In a game development framework, you might have classes for rendering graphics, managing input, and handling game logic.
Each class has a unique role.
Improved Readability: Code becomes easier to understand because each class has a clear and distinct purpose.

Q6. Explain the different types of errors that could arise in a denormalized database.
Error Propagation: Errors in the original data may propagate more easily in a denormalized database, as the same erroneous data may be repeated in multiple locations.
Concurrency and Locking Errors: In a denormalized database, when multiple users or processes attempt to update the same data in multiple places, concurrency and locking errors can occur. This can lead to contention and performance issues.
Update Anomalies: Update anomalies arise when you need to update the same data in multiple locations, and inconsistencies can occur if not all copies are updated. For instance, if a customer's address changes, and this address is duplicated for each order they've placed, updating the address in one place may lead to discrepancies.
Data Redundancy Errors: Data may be duplicated in multiple places within the database, which can lead to inconsistencies and errors when updates are made in one place but not in others.

Q7. What is normalization and what is the need for normalization?

aims to reduce data redundancy, eliminate update anomalies, and maintain data integrity.
Data Integrity: Normalization helps maintain data integrity by reducing or eliminating data anomalies.This ensures that data remains accurate and consistent throughout the database.
Data Consistency: By organizing data into well-structured tables and reducing redundancy, normalization promotes data consistency.This consistency is crucial for accurate reporting and analysis.
Efficient Storage: Normalization can lead to more efficient data storage, as it reduces redundant data. This can save storage space and improve database performance.

Q8. List out the different levels of Normalization and explain them in detail.
First Normal Form (1NF):
All columns contain atomic (indivisible) values.
Each column has a unique name.

Second normalform:
A table is in 2NF if it meets these criteria:
It is in 1NF.
All non-key attributes are fully functionally dependent on the primary key.

Third normalkey:
A table is in 3NF if it meets these criteria:
It is in 2NF.
There is no transitive dependency, meaning non-key attributes are not dependent on other non-key attributes.

Boyce-Codd Normal Form (BCNF):
Definition: A table is in BCNF if it meets these criteria:
It is in 3NF.
For any non-trivial functional dependency, the left-hand side must be a superkey. This means that the key uniquely identifies all other attributes.

Q9. What are joins and why do we need them?
 used to combine rows from two or more tables based on a related column between them.
They are fundamental for querying and retrieving data from relational databases. 
Data Analytics: In data analytics and business intelligence, joining data from multiple sources is a common practice
Business Logic: Business logic often involves multiple entities that need to be combined.
For example, an e-commerce application may need to retrieve and display customer information, order details, and shipping information, all of which are stored in separate tables and can be joined together.

Q10. Explain the different types of joins?

INNER JOIN:
An INNER JOIN returns only the rows that have matching values in both tables.
It combines rows from two tables based on a specified column (the join condition).

LEFT OUTER JOIN:
A LEFT JOIN returns all rows from the left table (the first table specified) and the matched rows from the right table.
If there are no matches in the right table, NULL values are returned.

RIGHT OUTER JOIN:
A RIGHT JOIN is the opposite of a LEFT JOIN.
It returns all rows from the right table and the matched rows from the left table.
If there are no matches in the left table, NULL values are returned.

FULL OUTER JOIN:
A FULL OUTER JOIN returns all rows when there is a match in either the left or the right table.
It combines the result sets of both the LEFT JOIN and the RIGHT JOIN.

CARTESIAN JOIN:
A CROSS JOIN returns the Cartesian product of the two tables, resulting in all possible combinations of rows from the two tables.
It doesn't require a join condition.


